####################################
# Project: AITU LeetCoder Bot      #
# Author: Arman Zhalgasbayev       #
# ¬© 2023 - All Rights Reserved     #
####################################

# Importing Dependencies
import threading
import telebot
import datetime
import time
import json
from background import keep_alive
from constants import BOT_TOKEN, ADMIN_ID
from telebot import types
from database import *
from leetcode import *
from codeforces import *

create_table()
# sample_data()
print_students()
# update_student_rankings(save_plangs=False)

###########################
# Telegram - Bot Settings #
###########################

# Initialize the bot
bot = telebot.TeleBot(BOT_TOKEN)


# Welcome Message 'Start' command
@bot.message_handler(commands=['start'])
def welcome_message(message):
  bot.send_message(message.chat.id,
                   f'''üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.chat.first_name}</b>!\n
üì¢ –ï—Å–ª–∏ –≤—ã —Å—Ç—É–¥–µ–Ω—Ç Astana IT University (AITU) –∏ —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ª—É—á—à–∏—Ö –ª–∏—Ç–∫–æ–¥–µ—Ä–æ–≤ –Ω–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/push username group</code>\n
üí¨ <i><b>username</b> - –Ω–∏–∫ –≤ –ª–∏—Ç–∫–æ–¥, –ø—Ä–∏–º–µ—Ä: silvermete0r</i>
üí¨ <i><b>group</b> - –≥—Ä—É–ø–ø–∞ –≤ AITU, –ø—Ä–∏–º–µ—Ä: SE-2209</i>\n
üìú –ü–æ–¥–±–æ—Ä–∫–∞ –≤–∞–∂–Ω–µ–π—à–∏—Ö –∫–æ–º–∞–Ω–¥:\n
üîª /mystats - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏);
üîª <code>/stats username</code> - –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ —á–µ–∫–Ω—É—Ç—å –∫–æ–≥–æ-—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ LeetCode;
üîª /notify - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –æ—Ç LeetCode;
üîª /lucky - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–∞—Å—Ç–ª–∏–≤–æ–π –∑–∞–¥–∞—á–∏;
üîª /experts - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –ø–æ –∑–∞–¥–∞—á–∞–º –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ AITU;
üìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ AITU: /standings
‚öôÔ∏è –î–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: /help\n
üôå –ü–æ–¥–¥–µ—Ä–∂–∫–∞: <code>supwithproject@gmail.com</code>''',
                   parse_mode='html')


# Instructions Message 'Help' command
@bot.message_handler(commands=['help'])
def instructions_message(message):
  bot.send_message(message.chat.id,
                   '''üìú –ü–æ–¥–±–æ—Ä–∫–∞ –≤–∞–∂–Ω–µ–π—à–∏—Ö –∫–æ–º–∞–Ω–¥:\n
üîª /mystats - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ—Å–ª–µ —Ä–µ–≥–∏—Ç—Ä–∞—Ü–∏–∏);
üîª <code>/stats username</code> - –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ —á–µ–∫–Ω—É—Ç—å –∫–æ–≥–æ-—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ LeetCode;
üîª /notify - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –æ—Ç LeetCode;
üîª /lucky - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–∞—Å—Ç–ª–∏–≤–æ–π –∑–∞–¥–∞—á–∏;
üîª /experts - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –ø–æ –∑–∞–¥–∞—á–∞–º –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ AITU;\n
üìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ AITU: /standings
‚öôÔ∏è –î–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: /help\n
üôå –ü–æ–¥–¥–µ—Ä–∂–∫–∞: <code>supwithproject@gmail.com</code>''',
                   parse_mode='html')


# Experts Connection 'Experts' command
@bot.message_handler(commands=['experts'])
def experts_message(message):
  bot.send_message(message.chat.id,
                   '''üë®‚Äçüíª Experts: <code>Kazakhstan LeetCode Community</code>\n
üí¨ LeetCode KZ Discussion: https://t.me/leetcodekz
üí¨ AITU LeetCode Chat: https://t.me/aitu_gdsc_leetcode_events
üí¨ AITU StackOverflow: https://t.me/+talhV-yKO1lkMjhi
ü§ñ ChatGPT: https://chat.openai.com\n
üôå –ü–æ–¥–¥–µ—Ä–∂–∫–∞: supwithproject@gmail.com''',
                   parse_mode='html',
                   disable_web_page_preview=True)


# About Message 'About' command
@bot.message_handler(commands=['about'])
def about_message(message):
  bot.send_message(message.chat.id,
                   '''üë®‚Äçüíª Author: <code>Arman Zhalgasbayev</code>\n
üï∏ Telegram/Instagram: @silvermete0r
üï∏ Github: https://github.com/silvermete0r
üï∏ Linkedin: https://www.linkedin.com/in/arman-zhalgasbayev\n
üôå –ü–æ–¥–¥–µ—Ä–∂–∫–∞: supwithproject@gmail.com''',
                   parse_mode='html',
                   disable_web_page_preview=True)


# Special Feature: Admin Access 'Delete User' command
@bot.message_handler(commands=['delete_user'])
def delete_user(message):
  if str(message.from_user.id) == ADMIN_ID:
    data = message.text.split()
    if len(data) != 2:
      ans = "Something went Wrong! Please Try Again! [Length != 2]"
    else:
      if delete_student_by_leetcode(data[1]) == 'SUCCESS':
        ans = f"User <code>{data[1]}</code> has been Successfully Deleted!"
      else:
        ans = f"Something went wrong in the process of deleting user <code>{data[1]}</code>"

  bot.send_message(message.chat.id, ans, parse_mode='html')


# Difficulty Level Smiles
smiles = {'Easy': 'üü¢', 'Medium': 'üü°', 'Hard': 'üî¥'}


# Random Problem 'Lucky' command
@bot.message_handler(commands=['lucky'])
def lucky_problem_message(message):
  msg = bot.send_message(message.chat.id, '–ü–æ–¥–±–∏—Ä–∞–µ–º –≤–∞–º –∑–∞–¥–∞—á—É...')
  msg = msg.message_id
  problem_info = getLuckyLeetCodeProblem()
  reply = f"üçÄ <b>{problem_info['title']}</b>\n\n"
  reply += f"{smiles[problem_info['difficulty']]} Difficulty: <b>{problem_info['difficulty']}</b>\n"
  reply += f"üî∞ Topics: <b>{problem_info['topics']}</b>\n"
  reply += f"üî∞ Acceptance Rate: <b>{problem_info['acRate']}</b>%\n\n"
  reply += problem_info['link']
  bot.reply_to(message, reply, parse_mode='html')
  bot.delete_message(message.chat.id, msg)


# LeetCode Daily Problem Sending Schedule 'Notify' command
@bot.message_handler(commands=['notify'])
def notify_daily_problem_message(message):
  state = ""
  if len(message.text.split()) == 2:
    state = message.text.split()[1]
  if state == "off":
    connection = sqlite3.connect("students")
    cursor = connection.cursor()
    try:
      cursor.execute(
        f"SELECT * FROM students WHERE telegram_id = {message.from_user.id};")
      connection.execute(
        f"UPDATE students SET message_chat_id = 0 WHERE telegram_id = {message.from_user.id};"
      )
    except Exception:
      bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º.")
      return
    if cursor.fetchone() is None:
      bot.reply_to(
        message,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ AITU.")
      return

    reply = "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–¥–∞—á LeetCode!"
    bot.reply_to(message, reply, parse_mode='html')

    connection.commit()
    connection.close()
  else:
    connection = sqlite3.connect("students")
    cursor = connection.cursor()
    try:
      cursor.execute(
        f"SELECT * FROM students WHERE telegram_id = {message.from_user.id};")
      connection.execute(
        f"UPDATE students SET message_chat_id = {message.chat.id} WHERE telegram_id = {message.from_user.id};"
      )
    except Exception:
      bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º.")
      return
    if cursor.fetchone() is None:
      bot.reply_to(
        message,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ AITU.")
      return
    reply = f"üëè –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å {message.chat.first_name}!\n\n"
    reply += "üî∞ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º Daily LeetCode Problems.\n\n"
    reply += "‚è∞ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ê—Å—Ç–∞–Ω—ã, –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É –æ—Ç LeetCode.\n"
    reply += "üèÜ –ü—Ä–∏ —Å—Ç—Ä–∏–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á –∑–∞ 1 –º–µ—Å—è—Ü –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–µ–π–¥–∂ –æ—Ç LeetCode.\n\n"
    reply += "–ñ–µ–ª–∞—é –≤–∞–º —É–¥–∞—á–∏ üçÄ\n\n"
    reply += "<i>–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:</i> <code>/notify off</code>\n"

    connection.commit()
    connection.close()
    bot.reply_to(message, reply, parse_mode='html')


# Daily Notification Sending
def send_daily_problem_notification():
  problem_info = getDailyLeetCodeProblem()
  daily_problem_info = f"üçÄ <b>{problem_info['title']}</b>\n\n"
  daily_problem_info += f"{smiles[problem_info['difficulty']]} Difficulty: <b>{problem_info['difficulty']}</b>\n"
  daily_problem_info += f"üî∞ Topics: <b>{problem_info['topics']}</b>\n"
  daily_problem_info += f"üî∞ Acceptance Rate: <b>{problem_info['acRate']}</b>%\n\n"
  daily_problem_info += problem_info['link']
  connection = sqlite3.connect("students")
  try:
    result = connection.execute(
      "SELECT message_chat_id AS mcid FROM students WHERE mcid!=0;")
    subscribers = [row[0] for row in result.fetchall()]
  except Exception:
    print("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º!")
    return
  finally:
    connection.close()
  for subscriber in subscribers:
    try:
      bot.send_message(subscriber, daily_problem_info, parse_mode='html')
    except Exception as e:
      print(f'User {subscriber}! –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', e)


# Register new student to the AITU students rankings 'Register' command
@bot.message_handler(commands=['push'])
def register_aitu_leetcoder(message):
  msg = bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...')
  msg = msg.message_id
  bot.send_chat_action(message.chat.id, 'typing')
  new_user = message.text.split()
  if len(new_user) != 3:
    bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    bot.delete_message(message.chat.id, msg)
    return
  group = new_user[2].upper()
  group_data = group.split('-')
  if len(group_data) != 2:
    bot.reply_to(message,
                 "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    bot.delete_message(message.chat.id, msg)
    return
  if group_data[0] not in ('SE', 'MT', 'ST', 'CS', 'IT', 'ITM', 'ITE', 'MCS',
                           'BDA', 'DJ'):
    bot.reply_to(message,
                 f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≥—Ä—É–ø–ø—ã {group_data[0]} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    bot.delete_message(message.chat.id, msg)
    return
  if not group_data[1].isnumeric():
    bot.reply_to(
      message,
      "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∏—à—å —Ü–∏—Ñ—Ä—ã.")
    bot.delete_message(message.chat.id, msg)
    return
  if int(group_data[1][:2]) < 19 or int(
      group_data[1][:2]) > (datetime.date.today().year % 100):
    bot.reply_to(
      message,
      f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã {group_data[1]} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    bot.delete_message(message.chat.id, msg)
    return
  username = new_user[1]
  data = get_leetcode_user_stats(username)
  if data["status"] == "error":
    bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.")
    bot.delete_message(message.chat.id, msg)
    return
  try:
    data['contest_ranking'] = get_contest_stats(username)['global_ranking']
    prog_lang = get_leetcode_user_planguages(username)
    add_student(int(message.from_user.id), group,
                str(datetime.date.today()), username, prog_lang, data['totalSolved'],
                data['easySolved'], data['mediumSolved'], data['hardSolved'],
                data['reputation'], data['contributionPoints'],
                data['ranking'], data['contest_ranking'])

  except AlreadyExistError:
    reply = "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ Telegram –∏–ª–∏ Leetcode –∞–∫–∫–∞—É–Ω—Ç–∞ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ!"

  except DatabaseError:
    reply = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º."

  else:
    reply = "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –æ–±—â—É—é –±–∞–∑—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ AITU! –ß–µ–∫–Ω—É—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: /mystats"

  bot.reply_to(message, reply, parse_mode='html')
  print(f'''
‚òëÔ∏è New student Successfully added to Database:
- Date: {datetime.date.today()};
- LeetCode: {username}; 
- Telegram: {str(message.from_user.username)};
- Edu Group: {group};
''')
  bot.delete_message(message.chat.id, msg)


# Inline Keyboard Callback Functions
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
  msg = None
  function_status, leetcode_username = call.data.split(" ", 1)
  try:
    if function_status == "get_contest_stats":
      msg = bot.send_message(call.message.chat.id, '–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...')
      msg = msg.message_id
      bot.send_chat_action(call.message.chat.id, 'typing')
      data = get_contest_stats(leetcode_username)

      if data["status"] == "error":
        bot.send_message(
          call.message.chat.id,
          f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{leetcode_username}</b> –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω—Ç–µ—Å—Ç–∞–º!",
          parse_mode='html')
        bot.delete_message(call.message.chat.id, msg)
        return

      contest_stats = f"üßó‚Äç‚ôÇÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{leetcode_username}</b>, –ø–æ –∫–æ–Ω—Ç–µ—Å—Ç–∞–º –≤ LeetCode!\n\n"
      contest_stats += f"üî∞ –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ—Å—Ç–æ–≤: <b>{data['attended_contests_count']}</b>\n"
      contest_stats += f"üî∞ –ü—É–Ω–∫—Ç—ã –†–µ–π—Ç–∏–Ω–≥–∞: <b>{round(data['rating'], 2)}</b>\n"
      contest_stats += f"üî∞ –ú–µ—Å—Ç–æ –≤ –ú–∏—Ä–æ–≤–æ–º –†–µ–π—Ç–∏–Ω–≥–µ: <b>{data['global_ranking']}</b>\n"
      contest_stats += f"üî∞ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ—Å—Ç–æ–≤ –≤ –º–∏—Ä–µ: <b>{data['total_participants']}</b>\n\n"
      contest_stats += f"‚≠ê –õ—É—á—à–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ –∫–æ–Ω—Ç–µ—Å—Ç—É: <b>TOP {data['top_percentage']}%</b>\n\n"

      bot.send_message(call.message.chat.id, contest_stats, parse_mode='html')
  except Exception as e:
    print(f'Error: {e}')
  finally:
    if msg:
      bot.delete_message(call.message.chat.id, msg)


# Show stats 'My-Stats' command
@bot.message_handler(commands=['mystats'])
def get_mystats(message):
  msg = bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...')
  msg = msg.message_id
  bot.send_chat_action(message.chat.id, 'typing')
  connection = sqlite3.connect("students")
  try:
    result = connection.execute(
      f"SELECT * FROM students WHERE telegram_id = {message.from_user.id};")
    student_data = result.fetchone()
    if student_data[0] != 1:
      closest_opponent = connection.execute(
        f"SELECT * FROM students WHERE aitu_rank = {student_data[0]} - 1;")
      closest_opponent_data = closest_opponent.fetchone()
  except Exception:
    bot.reply_to(
      message,
      "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ AITU.")
    bot.delete_message(message.chat.id, msg)
    return
  connection.commit()
  connection.close()

  aituRating, leetcode_username = student_data[0], student_data[5]
  data = get_leetcode_user_stats(leetcode_username)
  if data["status"] == "error":
    bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.")
    bot.delete_message(message.chat.id, msg)
    return
  update_student(leetcode_username)

  keyboard = types.InlineKeyboardMarkup()
  user_contest_stats_button = telebot.types.InlineKeyboardButton(
    text="Contest Stats",
    callback_data="get_contest_stats " + leetcode_username)

  keyboard.add(user_contest_stats_button)

  goal = ((data['totalSolved'] // 100) + 1) * 100
  neededGoal = goal - data['totalSolved']
  reply = f"üë®üèª‚Äçüíª –î–µ—Ä–∂–∏—Ç–µ, {message.from_user.first_name} -> —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{leetcode_username}</b>\n\n"
  reply += f"üî∞ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: <b>{get_leetcode_user_planguages(leetcode_username)}</b> \n"
  reply += f"üî∞ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: <b>{data['totalSolved']}</b> \n"
  reply += f"üî∞ –í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –≤—Å–µ–≥–æ <b>{neededGoal}</b> –∑–∞–¥–∞—á —á—Ç–æ–±—ã –¥–æ–π—Ç–∏ –¥–æ <b>{goal}</b> —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –ø–æ–¥–Ω—è—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!\n\n"

  reply += f"üü¢ –õ–µ–≥–∫–∏–µ –∑–∞–¥–∞—á–∏: <b>{data['easySolved']} / {data['totalEasy']} ({round((data['easySolved'] / data['totalEasy'])*100, 2)}%)</b>\n"
  reply += f"üü° –°—Ä–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏: <b>{data['mediumSolved']} / {data['totalMedium']} ({round((data['mediumSolved'] / data['totalMedium'])*100, 2)}%)</b>\n"
  reply += f"üî¥ –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏: <b>{data['hardSolved']} / {data['totalHard']} ({round((data['hardSolved'] / data['totalHard'])*100, 2)}%)</b>\n\n"
  reply += f"üî∞ –†–µ–ø—É—Ç–∞—Ü–∏—è –≤ LeetCode, –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É upvotes: <b>{data['reputation']} ‚¨ÜÔ∏è</b>\n"
  reply += f"üî∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö LeetCoin-–æ–≤: <b>{data['contributionPoints']} üí∞</b>\n\n"
  reply += f"üìà –ú–µ—Å—Ç–æ –≤ –º–∏—Ä–æ–≤–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ LeetCode: <b>{data['ranking']}</b>\n"
  reply += f"üìä –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ AITU: <b>{aituRating}</b>\n\n"
  if aituRating == 1:
    reply += f"üî∞ –ê–±—Å–æ–ª—é—Ç–Ω–∞—è –¥–æ–º–∏–Ω–∞—Ü–∏—è, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º <code>{leetcode_username}</code>, –≤—ã –∫–æ—Ä–æ–ª—å —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ AITU üëë\n\n"
  elif aituRating == 2:
    reply += f"üî∞ –í—ã –≤—Ç–æ—Ä–æ–π —Å–∏–ª—å–Ω–µ–π—à–∏–π –ª–∏—Ç–∫–æ–¥–µ—Ä AITU, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º <code>{leetcode_username}</code>, —á—Ç–æ–±—ã –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ª—É—á—à–∏—Ö –ª–∏—Ç–∫–æ–¥–µ—Ä–æ–≤ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ <b>{abs(data['ranking'] - closest_opponent_data[12])}</b> –ø—É–Ω–∫—Ç–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞!\n"
  elif aituRating == 3:
    reply += f"üî∞ –í—ã —Ç—Ä–µ—Ç–∏–π —Å–∏–ª—å–Ω–µ–π—à–∏–π –ª–∏—Ç–∫–æ–¥–µ—Ä AITU, —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Å–µ—Ä–µ–±—Ä–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ <b>{abs(data['ranking'] - closest_opponent_data[12])}</b> –ø—É–Ω–∫—Ç–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞!\n"
  else:
    reply += f"üî∞ –ß—Ç–æ–±—ã –æ–±–æ–≥–Ω–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ <code>{closest_opponent_data[5]}</code> –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ AITU, –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å—Å—è –≤—Å–µ–≥–æ –ª–∏—à—å –Ω–∞ <b>{abs(data['ranking'] - closest_opponent_data[12])}</b> –ø—É–Ω–∫—Ç–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞!\n"
  reply += "üî∞ –¢–æ–ø 3 –ª—É—á—à–∏—Ö –ª–∏—Ç–∫–æ–¥–µ—Ä–æ–≤: /top3\n\n"
  bot.reply_to(message, reply, parse_mode='html', reply_markup=keyboard)
  bot.delete_message(message.chat.id, msg)


# Show AITU LeetCode Rankings
@bot.message_handler(commands=['standings'])
def aitu_leetcode_rankings(message):
  keyboard = types.InlineKeyboardMarkup()
  ratings_button = types.InlineKeyboardButton(text="AITU-Ratings",
                                              url="https://b2a.kz/rkO")

  keyboard.add(ratings_button)

  msg = bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...')
  msg = msg.message_id
  bot.send_chat_action(message.chat.id, 'typing')

  bot.send_message(message.chat.id,
                   f'üìà –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å live-—Ä–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ AITU:',
                   reply_markup=keyboard)
  bot.delete_message(message.chat.id, msg)


# Show stats 'Stats' command
@bot.message_handler(commands=['stats'])
def get_stats(message):
  msg = bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
  msg = msg.message_id
  bot.send_chat_action(message.chat.id, 'typing')
  text = message.text.split()
  if len(text) != 2:
    bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    bot.delete_message(message.chat.id, msg)
    return
  username = text[1]
  data = get_leetcode_user_stats(username)
  if data["status"] == "error":
    bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.")
    bot.delete_message(message.chat.id, msg)
    return

  keyboard = types.InlineKeyboardMarkup()
  user_contest_stats_button = telebot.types.InlineKeyboardButton(
    text="Contest Stats", callback_data="get_contest_stats " + username)

  keyboard.add(user_contest_stats_button)

  reply = f"üë®üèª‚Äçüíª –î–µ—Ä–∂–∏—Ç–µ, {message.from_user.first_name} -> —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{username}</b>\n\n"
  reply += f"üî∞ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: <b>{get_leetcode_user_planguages(username)}</b> \n"
  reply += f"üî∞ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: <b>{data['totalSolved']}</b> \n"
  reply += f"üü¢ –õ–µ–≥–∫–∏–µ –∑–∞–¥–∞—á–∏: <b>{data['easySolved']} / {data['totalEasy']} ({round((data['easySolved'] / data['totalEasy'])*100, 2)}%)</b>\n"
  reply += f"üü° –°—Ä–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏: <b>{data['mediumSolved']} / {data['totalMedium']} ({round((data['mediumSolved'] / data['totalMedium'])*100, 2)}%)</b>\n"
  reply += f"üî¥ –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏: <b>{data['hardSolved']} / {data['totalHard']} ({round((data['hardSolved'] / data['totalHard'])*100, 2)}%)</b>\n\n"
  reply += f"üî∞ –†–µ–ø—É—Ç–∞—Ü–∏—è –≤ LeetCode, –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É upvotes: <b>{data['reputation']} ‚¨ÜÔ∏è</b>\n"
  reply += f"üî∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö LeetCoin-–æ–≤: <b>{data['contributionPoints']} üí∞</b>\n\n"
  reply += f"üìà –ú–µ—Å—Ç–æ –≤ –º–∏—Ä–æ–≤–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ LeetCode: <b>{data['ranking']}</b>\n"
  bot.reply_to(message, reply, parse_mode='html', reply_markup=keyboard)
  bot.delete_message(message.chat.id, msg)


# Show stats 'Top-3' command
@bot.message_handler(commands=['top3'])
def get_top3(message):
  connection = sqlite3.connect("students")
  result = connection.execute(
    "SELECT leetcode_username, aitu_ranking FROM students ORDER BY aitu_rank ASC LIMIT 3;"
  )
  top = result.fetchall()
  connection.commit()
  connection.close()
  if len(top) < 3:
    reply = "üí¨ –ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω—å—à–µ 3 —á–µ–ª–æ–≤–µ–∫, –ø–æ—ç—Ç–æ–º—É –¢–û–ü-3 –µ—â–µ –Ω–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω."
  else:
    reply = "üî∞ –¢–û–ü-3 –ª—É—á—à–∏—Ö üî•\n\n"
    reply += f"ü•á <code>{top[0][0]}</code>, AITU Score: <b>{top[0][1]}</b>\n"
    reply += f"ü•à <code>{top[1][0]}</code>, AITU Score: <b>{top[1][1]}</b>\n"
    reply += f"ü•â <code>{top[2][0]}</code>, AITU Score: <b>{top[2][1]}</b>\n\n"
  bot.reply_to(message, reply, parse_mode='html')


# Feature: Checking Codeforces user info
@bot.message_handler(commands=['codeforces'])
def get_codeforces_user_info(message):
  msg = bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
  msg = msg.message_id
  bot.send_chat_action(message.chat.id, 'typing')
  lst = message.text.split()
  if len(lst) != 2:
    bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    bot.delete_message(message.chat.id, msg)
    return
  codeforces_handle = lst[1]
  user_info = get_codeforces_user(codeforces_handle)
  if user_info["status"] == "OK":
    user_info = user_info['result'][0]
    days_in_codeforces = convert_seconds_to_days(
      int(user_info['registrationTimeSeconds']))
    fullname = user_info['firstName'] + " " + user_info[
      'lastName'] if 'firstName' in user_info and 'lastName' in user_info else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    rank_info = f"{user_info['rank']} (max: {user_info['maxRank']})" if 'rank' in user_info and 'maxRank' in user_info else '–ù–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ'
    rating_info = f"{user_info['rating']} (max: {user_info['maxRating']})" if 'rating' in user_info and 'maxRating' in user_info else '–ù–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ'
    if 'organization' in user_info and user_info['organization'] != '':
      organization_info = user_info['organization']
    else:
      organization_info = '–ù–µ —Å–æ—Å—Ç–æ–∏—Ç'
    reply = f"üë®üèª‚Äçüíª –î–µ—Ä–∂–∏—Ç–µ, {message.from_user.first_name} -> —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{codeforces_handle}</b>\n\n"
    reply += f"üî∞ –§–ò–û: <b>{fullname}</b>\n"
    reply += f"üî∞ –†–∞–Ω–≥: <b>{rank_info}</b>\n"
    reply += f"üî∞ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <b>{organization_info}</b>\n\n"
    reply += f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: <b>{rating_info}</b>\n"
    reply += f"üèîÔ∏è –í–∫–ª–∞–¥: <b>{user_info['contribution']}</b>\n"
    reply += f"üëê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π: <b>{user_info['friendOfCount']}</b>\n"
    reply += f"üëΩ –í Codeforces —É–∂–µ <b>{days_in_codeforces}</b> –¥–Ω–µ–π.\n\n"
    reply += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: <code><a href='https://codeforces.com/profile/{codeforces_handle}'>{codeforces_handle}</a></code>"
    bot.delete_message(message.chat.id, msg)
    bot.reply_to(message, reply, parse_mode='html')
    return
  else:
    bot.reply_to(
      message,
      f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥ –Ω–∏–∫–æ–º {codeforces_handle} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    bot.delete_message(message.chat.id, msg)
    return


# Secret Command: 'myNewLeetcode' for changing leetcode username
@bot.message_handler(commands=['myNewLeetcode'])
def get_my_new_leetcode_username(message):
  msg = bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...')
  msg = msg.message_id
  bot.send_chat_action(message.chat.id, 'typing')
  text = message.text.split()
  if len(text) != 2:
    bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ—Ä–∞–≤–∏–ª—å–Ω–æ.")
    bot.delete_message(message.chat.id, msg)
    return
  username = text[1]
  data = get_leetcode_user_stats(username)
  if data["status"] == "error":
    bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.")
    bot.delete_message(message.chat.id, msg)
    return
  status = update_student_leetcode_username_by_telegram_id(
    message.from_user.id, username)
  if status == 'ERROR':
    bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
    bot.delete_message(message.chat.id, msg)
    return
  bot.reply_to(
    message,
    f"–í–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ LeetCode –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ <code>{username}</code>.",
    parse_mode='html')
  bot.delete_message(message.chat.id, msg)


# Secret Command: 'myGroup' for changing information about edu group
@bot.message_handler(commands=['myGroup'])
def get_myGroup(message):
  msg = bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...')
  msg = msg.message_id
  bot.send_chat_action(message.chat.id, 'typing')
  group = message.text.split()
  if len(group) != 2:
    bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    bot.delete_message(message.chat.id, msg)
    return
  edu_group = group[1].upper()
  group_data = edu_group.split('-')
  if len(group_data) != 2:
    bot.reply_to(message,
                 "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    bot.delete_message(message.chat.id, msg)
    return
  if group_data[0] not in ('SE', 'MT', 'ST', 'CS', 'IT', 'ITM', 'ITE', 'MCS',
                           'BDA', 'DJ'):
    bot.reply_to(message,
                 f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≥—Ä—É–ø–ø—ã {group_data[0]} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    bot.delete_message(message.chat.id, msg)
    return
  if not group_data[1].isnumeric():
    bot.reply_to(
      message,
      "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∏—à—å —Ü–∏—Ñ—Ä—ã.")
    bot.delete_message(message.chat.id, msg)
    return
  if int(group_data[1][:2]) < 19 or int(
      group_data[1][:2]) > (datetime.date.today().year % 100):
    bot.reply_to(
      message,
      f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã {group_data[1]} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    bot.delete_message(message.chat.id, msg)
    return

  connection = sqlite3.connect("students")
  try:
    result = connection.execute(
      f"SELECT * FROM students WHERE telegram_id = {message.from_user.id};")
    fetched_data = result.fetchone()
  except Exception:
    bot.reply_to(
      message,
      "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ AITU.")
    bot.delete_message(message.chat.id, msg)
    return
  connection.commit()
  connection.close()

  old_edu_group = fetched_data[3]
  if old_edu_group == edu_group:
    bot.reply_to(
      message,
      f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤–∞—à–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –µ—Å—Ç—å: <code>{edu_group}</code>.",
      parse_mode='html')
    bot.delete_message(message.chat.id, msg)
    return
  update_student_edu_group_by_telegramID(message.from_user.id, edu_group)
  bot.reply_to(
    message,
    f"–í–∞—à–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å <code>{old_edu_group}</code> –Ω–∞ <code>{edu_group}</code>.",
    parse_mode='html')
  bot.delete_message(message.chat.id, msg)


# Unknown Messages Handling '???' command
@bot.message_handler(func=lambda message: True)
def handle_unknown_message(message):
  msg = f'üí¨ –ò–∑–≤–∏–Ω–∏—Ç–µ, <b>{message.chat.first_name}</b>. –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.\n\n'
  msg += 'üíÅ –ü–æ–º–æ—â—å: /help'
  bot.send_message(message.chat.id, msg, parse_mode='html')


# Set the time for the daily notification (in 24-hour format)
notification_time = "02:00"

# Remove Webhook & Keeping Bot Alive on the Server
bot.remove_webhook()
keep_alive()

# Define the function that starts the bot polling in a separate thread
def start_polling():
  bot.polling()

# Start the bot polling in a separate thread
polling_thread = threading.Thread(target=start_polling)
polling_thread.start()

# Send Daily Notification
while True:
  now = datetime.datetime.now().time().strftime('%H:%M')
  if now == notification_time:
    update_student_rankings(save_plangs=False)
    send_daily_problem_notification()
    time.sleep(86400)
  else:
    time.sleep(1)